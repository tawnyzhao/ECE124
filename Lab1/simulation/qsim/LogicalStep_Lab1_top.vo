// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 15.1.0 Build 185 10/21/2015 SJ Standard Edition"

// DATE "01/14/2020 14:45:26"

// 
// Device: Altera 10M08SAE144C8G Package EQFP144
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module LogicalStep_Lab1_top (
	seg7_char1,
	seg7_char2,
	leds,
	PB,
	clkin_50,
	sw);
output 	seg7_char1;
output 	seg7_char2;
output 	[7:0] leds;
input 	[1:0] PB;
input 	clkin_50;
input 	[1:0] sw;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \clkin_50~input_o ;
wire \sw[1]~input_o ;
wire \sw[0]~input_o ;
wire \seg7_char1~output_o ;
wire \seg7_char2~output_o ;
wire \leds[7]~output_o ;
wire \leds[6]~output_o ;
wire \leds[5]~output_o ;
wire \leds[4]~output_o ;
wire \leds[3]~output_o ;
wire \leds[2]~output_o ;
wire \leds[1]~output_o ;
wire \leds[0]~output_o ;
wire \PB[1]~input_o ;
wire \PB[0]~input_o ;
wire \inst|inst6~combout ;
wire \inst|inst5~combout ;
wire \inst|inst4~combout ;


fiftyfivenm_io_obuf \seg7_char1~output (
	.i(gnd),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\seg7_char1~output_o ),
	.obar());
// synopsys translate_off
defparam \seg7_char1~output .bus_hold = "false";
defparam \seg7_char1~output .open_drain_output = "false";
// synopsys translate_on

fiftyfivenm_io_obuf \seg7_char2~output (
	.i(gnd),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\seg7_char2~output_o ),
	.obar());
// synopsys translate_off
defparam \seg7_char2~output .bus_hold = "false";
defparam \seg7_char2~output .open_drain_output = "false";
// synopsys translate_on

fiftyfivenm_io_obuf \leds[7]~output (
	.i(gnd),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\leds[7]~output_o ),
	.obar());
// synopsys translate_off
defparam \leds[7]~output .bus_hold = "false";
defparam \leds[7]~output .open_drain_output = "false";
// synopsys translate_on

fiftyfivenm_io_obuf \leds[6]~output (
	.i(gnd),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\leds[6]~output_o ),
	.obar());
// synopsys translate_off
defparam \leds[6]~output .bus_hold = "false";
defparam \leds[6]~output .open_drain_output = "false";
// synopsys translate_on

fiftyfivenm_io_obuf \leds[5]~output (
	.i(gnd),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\leds[5]~output_o ),
	.obar());
// synopsys translate_off
defparam \leds[5]~output .bus_hold = "false";
defparam \leds[5]~output .open_drain_output = "false";
// synopsys translate_on

fiftyfivenm_io_obuf \leds[4]~output (
	.i(gnd),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\leds[4]~output_o ),
	.obar());
// synopsys translate_off
defparam \leds[4]~output .bus_hold = "false";
defparam \leds[4]~output .open_drain_output = "false";
// synopsys translate_on

fiftyfivenm_io_obuf \leds[3]~output (
	.i(\inst|inst6~combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\leds[3]~output_o ),
	.obar());
// synopsys translate_off
defparam \leds[3]~output .bus_hold = "false";
defparam \leds[3]~output .open_drain_output = "false";
// synopsys translate_on

fiftyfivenm_io_obuf \leds[2]~output (
	.i(\inst|inst5~combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\leds[2]~output_o ),
	.obar());
// synopsys translate_off
defparam \leds[2]~output .bus_hold = "false";
defparam \leds[2]~output .open_drain_output = "false";
// synopsys translate_on

fiftyfivenm_io_obuf \leds[1]~output (
	.i(!\inst|inst4~combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\leds[1]~output_o ),
	.obar());
// synopsys translate_off
defparam \leds[1]~output .bus_hold = "false";
defparam \leds[1]~output .open_drain_output = "false";
// synopsys translate_on

fiftyfivenm_io_obuf \leds[0]~output (
	.i(\inst|inst4~combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\leds[0]~output_o ),
	.obar());
// synopsys translate_off
defparam \leds[0]~output .bus_hold = "false";
defparam \leds[0]~output .open_drain_output = "false";
// synopsys translate_on

fiftyfivenm_io_ibuf \PB[1]~input (
	.i(PB[1]),
	.ibar(gnd),
	.nsleep(vcc),
	.o(\PB[1]~input_o ));
// synopsys translate_off
defparam \PB[1]~input .bus_hold = "false";
defparam \PB[1]~input .listen_to_nsleep_signal = "false";
defparam \PB[1]~input .simulate_z_as = "z";
// synopsys translate_on

fiftyfivenm_io_ibuf \PB[0]~input (
	.i(PB[0]),
	.ibar(gnd),
	.nsleep(vcc),
	.o(\PB[0]~input_o ));
// synopsys translate_off
defparam \PB[0]~input .bus_hold = "false";
defparam \PB[0]~input .listen_to_nsleep_signal = "false";
defparam \PB[0]~input .simulate_z_as = "z";
// synopsys translate_on

fiftyfivenm_lcell_comb \inst|inst6 (
// Equation(s):
// \inst|inst6~combout  = \PB[1]~input_o  $ (\PB[0]~input_o )

	.dataa(gnd),
	.datab(gnd),
	.datac(\PB[1]~input_o ),
	.datad(\PB[0]~input_o ),
	.cin(gnd),
	.combout(\inst|inst6~combout ),
	.cout());
// synopsys translate_off
defparam \inst|inst6 .lut_mask = 16'h0FF0;
defparam \inst|inst6 .sum_lutc_input = "datac";
// synopsys translate_on

fiftyfivenm_lcell_comb \inst|inst5 (
// Equation(s):
// \inst|inst5~combout  = (\PB[1]~input_o ) # (\PB[0]~input_o )

	.dataa(\PB[1]~input_o ),
	.datab(\PB[0]~input_o ),
	.datac(gnd),
	.datad(gnd),
	.cin(gnd),
	.combout(\inst|inst5~combout ),
	.cout());
// synopsys translate_off
defparam \inst|inst5 .lut_mask = 16'hEEEE;
defparam \inst|inst5 .sum_lutc_input = "datac";
// synopsys translate_on

fiftyfivenm_lcell_comb \inst|inst4 (
// Equation(s):
// \inst|inst4~combout  = (\PB[1]~input_o  & \PB[0]~input_o )

	.dataa(\PB[1]~input_o ),
	.datab(\PB[0]~input_o ),
	.datac(gnd),
	.datad(gnd),
	.cin(gnd),
	.combout(\inst|inst4~combout ),
	.cout());
// synopsys translate_off
defparam \inst|inst4 .lut_mask = 16'h8888;
defparam \inst|inst4 .sum_lutc_input = "datac";
// synopsys translate_on

fiftyfivenm_io_ibuf \clkin_50~input (
	.i(clkin_50),
	.ibar(gnd),
	.nsleep(vcc),
	.o(\clkin_50~input_o ));
// synopsys translate_off
defparam \clkin_50~input .bus_hold = "false";
defparam \clkin_50~input .listen_to_nsleep_signal = "false";
defparam \clkin_50~input .simulate_z_as = "z";
// synopsys translate_on

fiftyfivenm_io_ibuf \sw[1]~input (
	.i(sw[1]),
	.ibar(gnd),
	.nsleep(vcc),
	.o(\sw[1]~input_o ));
// synopsys translate_off
defparam \sw[1]~input .bus_hold = "false";
defparam \sw[1]~input .listen_to_nsleep_signal = "false";
defparam \sw[1]~input .simulate_z_as = "z";
// synopsys translate_on

fiftyfivenm_io_ibuf \sw[0]~input (
	.i(sw[0]),
	.ibar(gnd),
	.nsleep(vcc),
	.o(\sw[0]~input_o ));
// synopsys translate_off
defparam \sw[0]~input .bus_hold = "false";
defparam \sw[0]~input .listen_to_nsleep_signal = "false";
defparam \sw[0]~input .simulate_z_as = "z";
// synopsys translate_on

assign seg7_char1 = \seg7_char1~output_o ;

assign seg7_char2 = \seg7_char2~output_o ;

assign leds[7] = \leds[7]~output_o ;

assign leds[6] = \leds[6]~output_o ;

assign leds[5] = \leds[5]~output_o ;

assign leds[4] = \leds[4]~output_o ;

assign leds[3] = \leds[3]~output_o ;

assign leds[2] = \leds[2]~output_o ;

assign leds[1] = \leds[1]~output_o ;

assign leds[0] = \leds[0]~output_o ;

endmodule
